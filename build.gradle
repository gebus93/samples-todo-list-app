buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.cloud:spring-cloud-contract-gradle-plugin:3.1.1'
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}
apply plugin: 'spring-cloud-contract'

group = 'pl.thinkandcode.samples.todo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    archUnitVersion = "0.23.1"
    testcontainersVersion = "1.16.3"
    nimbusVersion = "9.21"
    openapiVersion = "1.6.6"
    springCloudVersion = "2021.0.1"
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.cloud:spring-cloud-starter-sleuth")

    implementation("org.springdoc:springdoc-openapi-ui:${openapiVersion}")
    implementation("org.springdoc:springdoc-openapi-security:${openapiVersion}")
    implementation("com.nimbusds:nimbus-jose-jwt:${nimbusVersion}")
    runtimeOnly("io.micrometer:micrometer-registry-prometheus")

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    testImplementation("com.tngtech.archunit:archunit-junit5:${archUnitVersion}")
    testImplementation("org.testcontainers:testcontainers:${testcontainersVersion}")
    testImplementation("org.testcontainers:junit-jupiter:${testcontainersVersion}")
    testImplementation("org.testcontainers:mongodb:${testcontainersVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.springframework.cloud:spring-cloud-starter-contract-verifier")
}

tasks.named('test') {
    useJUnitPlatform() {
        excludeTags "architecture"
        excludeTags "integration"
        excludeTags "contract"
        excludeTags "component"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

def architectureTest = tasks.register("architectureTest", Test) {
    useJUnitPlatform {
        includeTags "architecture"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    shouldRunAfter test
}


tasks.named("contractTest") {
    useJUnitPlatform {
        includeTags "contract"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    shouldRunAfter architectureTest
}

def integrationTest = tasks.register("integrationTest", Test) {
    useJUnitPlatform {
        includeTags "integration"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    shouldRunAfter contractTest
}

def componentTest = tasks.register("componentTest", Test) {
    dependsOn dockerComposeUp
    finalizedBy dockerComposeDown
    useJUnitPlatform {
        includeTags "component"
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    shouldRunAfter integrationTest, dockerComposeUp
}

tasks.named("check") {
    dependsOn architectureTest
    dependsOn contractTest
    dependsOn integrationTest
    dependsOn componentTest
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

contracts {
    testFramework = org.springframework.cloud.contract.verifier.config.TestFramework.JUNIT5
    baseClassForTests = "pl.thinkandcode.samples.todo.contracts.AbstractContractTest"
}

OperatingSystem os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem;

task dockerComposeUp(type: Exec) {
    workingDir "${rootDir}/component-tests-env"
    if (os.isWindows()) {
        commandLine 'cmd', '/c', 'compose-up.bat'
    } else {
        commandLine './compose-up.sh'
    }
}

task dockerComposeDown(type: Exec) {
    workingDir "${rootDir}/component-tests-env"
    if (os.isWindows()) {
        commandLine 'cmd', '/c', 'compose-down.bat'
    } else {
        commandLine './compose-down.sh'
    }
}
